class Solution {
public:
    int f(int i, int j , vector<vector<int>>& obstacleGrid,int m ,int n,
vector<vector<int>> &dp){
        if(i>=m || j>=n){
            return 0;
        }
        if(i==m-1 && j==n-1){
            return 1;
        }
        if(obstacleGrid[i][j]==1){
            return 0;
        }

        if(dp[i][j]!=-1){
            return dp[i][j];
        }
       
        
        int down=f(i+1,j, obstacleGrid,m,n,dp);
        int left=f(i,j+1, obstacleGrid,m,n,dp);
        return dp[i][j]=down+left;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        if(obstacleGrid[m-1][n-1]==1){
            return 0;
        }
        return f(0,0,obstacleGrid,m,n,dp);
    }
};
