/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        // if(root==NULL){
        //     return {};
        // }
        // stack<TreeNode*> st;
        // vector<int>ans;
        // st.push(root);
        
        // while(!st.empty()){
        //     TreeNode *curr= st.top();
        //     st.pop();
        //     ans.push_back(curr->val);
        //     if(curr->right!=NULL){
        //         st.push(curr->right);
        //     }
        //     if(curr->left!=NULL){
        //         st.push(curr->left);
        //     }
            
            
        // }
        // return ans;
        if(root==NULL){
            return {};
        }
        vector<int>ans;
        TreeNode *curr=root;
        while(curr!=NULL){
            if(curr->left==NULL){
                ans.push_back(curr->val);
                curr=curr->right;

            }else{
                TreeNode *prev=curr->left;
                while(prev->right!=NULL && prev->right!=curr){
                    prev=prev->right;
                }
                if(prev->right==NULL){
                    prev->right=curr;
                    ans.push_back(curr->val);
                    curr=curr->left;
                }
                else{
                    prev->right=NULL;
                    
                    curr=curr->right;
                }
            }


        }
        return ans;
        
    }
};
